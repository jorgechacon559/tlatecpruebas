// Backend Simulator para el sistema de suscripciones
// Este archivo simula c√≥mo funcionar√≠a el backend real

class OrderManager {
  constructor() {
    this.orders = JSON.parse(localStorage.getItem('orders') || '[]');
    this.customers = JSON.parse(localStorage.getItem('customers') || '[]');
  }

  // Crear nuevo pedido
  createOrder(orderData) {
    const order = {
      id: 'ORD-' + Date.now(),
      timestamp: new Date().toISOString(),
      customer: orderData.customer,
      subscription: orderData.subscription,
      extras: orderData.extras,
      status: {
        subscription: 'pending',
        extras: 'pending'
      },
      payments: {
        subscriptionPaymentId: null,
        extrasPaymentIds: []
      }
    };

    this.orders.push(order);
    this.saveOrders();
    return order;
  }

  // Actualizar estado de pago
  updatePaymentStatus(orderId, paymentType, status, paymentId = null) {
    const order = this.orders.find(o => o.id === orderId);
    if (order) {
      order.status[paymentType] = status;
      if (paymentId) {
        if (paymentType === 'subscription') {
          order.payments.subscriptionPaymentId = paymentId;
        } else {
          order.payments.extrasPaymentIds.push(paymentId);
        }
      }
      this.saveOrders();
      this.sendStatusEmail(order);
    }
  }

  // Enviar email de confirmaci√≥n
  sendConfirmationEmail(order) {
    const emailTemplate = this.generateEmailTemplate(order);
    
    // Simular env√≠o de email
    console.log('üìß Enviando email de confirmaci√≥n a:', order.customer.email);
    console.log('Contenido del email:', emailTemplate);
    
    // En un entorno real, aqu√≠ integrar√≠as con un servicio de email
    // como SendGrid, Mailgun, etc.
    return this.simulateEmailSend(order.customer.email, emailTemplate);
  }

  // Enviar email de actualizaci√≥n de estado
  sendStatusEmail(order) {
    if (order.status.subscription === 'completed' && 
        order.status.extras === 'completed') {
      
      const emailTemplate = this.generateCompletionEmailTemplate(order);
      console.log('üìß Enviando email de completaci√≥n a:', order.customer.email);
      console.log('Contenido:', emailTemplate);
    }
  }

  // Generar template de email
  generateEmailTemplate(order) {
    const subscriptionInfo = order.subscription ? 
      `Suscripci√≥n: ${order.subscription.name} - $${order.subscription.price} MXN/mes` : '';
    
    const extrasInfo = order.extras.length > 0 ?
      order.extras.map(item => `${item.name} - $${item.price} MXN`).join('\n') : '';

    return `
Hola ${order.customer.nombre},

¬°Gracias por tu pedido!

DETALLES DEL PEDIDO:
-------------------
N√∫mero de pedido: ${order.id}
Fecha: ${new Date(order.timestamp).toLocaleDateString('es-MX')}

${subscriptionInfo}
${extrasInfo}

INFORMACI√ìN DE PAGO:
-------------------
Los pagos est√°n siendo procesados a trav√©s de MercadoPago.
Recibir√°s una confirmaci√≥n adicional una vez que todos los pagos sean completados.

PR√ìXIMOS PASOS:
--------------
1. Confirma tus pagos en las p√°ginas de MercadoPago que se abrieron
2. Recibir√°s acceso a tu suscripci√≥n dentro de las pr√≥ximas 24 horas
3. Los productos adicionales se activar√°n inmediatamente despu√©s del pago

Si tienes alguna pregunta, no dudes en contactarnos.

¬°Gracias por elegirnos!

Equipo de Soporte
    `;
  }

  generateCompletionEmailTemplate(order) {
    return `
Hola ${order.customer.nombre},

¬°Excelentes noticias! Todos tus pagos han sido confirmados.

Tu suscripci√≥n est√° ahora ACTIVA y tienes acceso completo a todos los beneficios.
Los productos adicionales tambi√©n han sido activados en tu cuenta.

Puedes acceder a tu panel de usuario en: [LINK_PANEL_USUARIO]

¬°Disfruta de tu suscripci√≥n!

Equipo de Soporte
    `;
  }

  // Simular env√≠o de email
  simulateEmailSend(email, content) {
    return new Promise((resolve) => {
      setTimeout(() => {
        console.log(`‚úÖ Email enviado exitosamente a ${email}`);
        resolve(true);
      }, 1000);
    });
  }

  // Webhook simulator for MercadoPago
  handleMercadoPagoWebhook(webhookData) {
    console.log('üîó Webhook recibido de MercadoPago:', webhookData);
    
    // Simular procesamiento del webhook
    const { payment_id, status, external_reference } = webhookData;
    
    if (status === 'approved') {
      // Buscar el pedido por referencia externa
      const order = this.orders.find(o => o.id === external_reference);
      if (order) {
        // Determinar si es suscripci√≥n o extra
        if (webhookData.subscription_id) {
          this.updatePaymentStatus(order.id, 'subscription', 'completed', payment_id);
        } else {
          this.updatePaymentStatus(order.id, 'extras', 'completed', payment_id);
        }
      }
    }
  }

  // Obtener todos los pedidos
  getAllOrders() {
    return this.orders;
  }

  // Obtener pedidos por cliente
  getOrdersByCustomer(email) {
    return this.orders.filter(order => order.customer.email === email);
  }

  // Guardar pedidos en localStorage (simula base de datos)
  saveOrders() {
    localStorage.setItem('orders', JSON.stringify(this.orders));
  }

  // Integraci√≥n con MercadoPago (simulada)
  createMercadoPagoPreference(orderData) {
    // Simular creaci√≥n de preferencia en MercadoPago
    const preference = {
      id: 'MP-PREF-' + Date.now(),
      init_point: 'https://www.mercadopago.com.mx/checkout/v1/redirect?pref_id=MP-PREF-' + Date.now(),
      external_reference: orderData.id,
      items: orderData.extras.map(item => ({
        title: item.name,
        unit_price: item.price,
        quantity: 1
      }))
    };

    console.log('üí≥ Preferencia de MercadoPago creada:', preference);
    return preference;
  }
}

// Inicializar el manager
const orderManager = new OrderManager();

// Simular algunos pedidos de ejemplo (solo para testing)
if (orderManager.getAllOrders().length === 0) {
  console.log('üìù Inicializando con datos de ejemplo...');
  
  const exampleOrder = {
    customer: {
      nombre: 'Juan',
      apellido: 'P√©rez',
      email: 'juan.perez@example.com'
    },
    subscription: {
      id: 'sub1',
      name: 'Paquete Premium',
      price: 10,
      type: 'subscription'
    },
    extras: [
      {
        id: 'extra1',
        name: 'Producto Extra Premium',
        price: 50,
        type: 'extra'
      }
    ]
  };

  orderManager.createOrder(exampleOrder);
}

// Exportar para uso global
window.OrderManager = OrderManager;
window.orderManager = orderManager;
